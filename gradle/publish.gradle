ext.javaLibraries = [
    'explorer-api-common-lib',
    'explorer-api-common-test'
]

// Save this in case we make a packaging subproject 
// ext.serviceJars = [ 'zowe-package' ]
ext.projectsToPublish = ext.javaLibraries
ext.publishTasksList = projectsToPublish.collect { ":" + it + ":publish" }


configure(subprojects.findAll { it.name in projectsToPublish }) {
    apply plugin: "maven"
    apply plugin: 'maven-publish'
    // Java will already be applied elsewhere, but need it here for 'sourceSets'
    apply plugin: 'java'
    
    task sourcesJar(type: Jar) {
    	from sourceSets.main.allJava
    	classifier = 'sources'
    }
    
    task javadocJar(type: Jar) {
    	from javadoc
    	classifier = 'javadoc'
    }

    publishing {
        repositories.maven {
            credentials {
                username project.hasProperty("deploy.username") ? project.getProperty("deploy.username") : mavenPublishUser
                password  project.hasProperty("deploy.password") ? project.getProperty("deploy.password") : mavenPublishPassword
            }
            if (rootProject.version =~ '^[0-9]+\\.[0-9]+\\.[0-9]+$' ) {
                setUrl(artifactoryPublishingMavenRepo)
            } else {
                setUrl(artifactoryPublishingMavenSnapshotRepo)
            }
        }
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                groupId 'org.zowe.explorer.api'
                version rootProject.version
                artifactId "${project.name}"
                from components.java
                artifact sourcesJar
                artifact javadocJar
                pom.withXml {
                    asNode().dependencies.'*'.findAll() {
                        it.scope.text() == 'runtime' && project.configurations.compile.allDependencies.find { dep ->
                            dep.name == it.artifactId.text()
                        }
                    }.each { it.scope*.value = 'compile' }
                }
            }
        }
    }

    tasks.withType(Jar) {
        metaInf {
            from rootProject.file("LICENSE")
        }

        manifest {
            attributes "Specification-Title": project.name
            attributes "Specification-Version": rootProject.version
            attributes "Specification-Vendor": "Zowe Open Source Project"

            attributes "Implementation-Title": project.name
            attributes "Implementation-Version": rootProject.version
            attributes "Implementation-Vendor": "Zowe Open Source Project"
            attributes "Implementation-Vendor-Id": "org.zowe"

            attributes "Bundle-License": "https://www.eclipse.org/legal/epl-v20.html"
        }
    }

}

//noinspection GroovyAssignabilityCheck
task publishArtifacts {
    group 'Zowe Publishing'
    description 'Publish api-common libraries to Zowe Artifactory'
    doLast {
        println 'Publish api-common libraries to Zowe Artifactory'
    }
}

publishArtifacts.dependsOn publishTasksList