import java.util.regex.Matcher

//noinspection GroovyAssignabilityCheck
group 'org.zowe.explorer'

buildscript {
    ext {
        licenseGradlePluginVerion = '0.15.0'
    }

    ext.mavenRepositories = {
        mavenLocal()
        maven {
            url artifactoryMavenSnapshotRepo
            credentials {
                username mavenUser
                password mavenPassword
            }
        }
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        maven {
            url artifactoryMavenRepo
            credentials {
                username mavenUser
                password mavenPassword
            }
        }
    }

    repositories mavenRepositories

    dependencies {
        classpath 'org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.7'
        classpath 'net.researchgate:gradle-release:2.6.0'
        classpath "gradle.plugin.com.hierynomus.gradle.plugins:license-gradle-plugin:${licenseGradlePluginVerion}"
        classpath 'org.owasp:dependency-check-gradle:3.3.4'
    }

    
}

apply from: 'gradle/publish.gradle'
apply from: 'gradle/sonar.gradle'
apply from: 'gradle/coverage.gradle'
apply from: 'gradle/versions.gradle'
apply from: 'gradle/code-quality.gradle'

allprojects {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'maven'
    apply plugin: 'com.github.hierynomus.license'
    apply plugin: 'com.github.hierynomus.license-report'
    apply plugin: 'org.owasp.dependencycheck'

    repositories mavenRepositories

    sourceCompatibility = 1.8
    version = version



    idea {
        module {
            //noinspection GroovyAssignabilityCheck
            outputDir file('build/classes/main')
            //noinspection GroovyAssignabilityCheck
            testOutputDir file('build/classes/test')
            downloadJavadoc = true
            downloadSources = true
        }
    }

    configurations.all {
        exclude group: 'org.glassfish', module: 'jakarta.el'
    }
}


subprojects {

    license {
        header rootProject.file('.license/LICENSE_HEADER')
        ext.year = Calendar.getInstance().get(Calendar.YEAR)
        excludes(["**/*.yml", "**/*.json", "**/static", "**/*.sh", "**/*.txt", "**/*.p12", "**/*.xml", "**/*.jsp", "**/*.html", "**/*.jks"])
        mapping {
            java = 'SLASHSTAR_STYLE'
        }
        skipExistingHeaders = true
    }

    tasks.withType(Test) {
        maxParallelForks = Runtime.runtime.availableProcessors()
    }
}

configurations {
    all*.exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    all*.exclude group: 'com.fasterxml.jackson.module', module: 'jackson-module-kotlin'
}

downloadLicenses {
    includeProjectDependencies = true;
}

// These projects will not have their dependencies reported in the "downloadLicenses" task.
def excludedScanProjects = [ "explorer-api-common-test"]

/* 
*   To prevent reporting dependencies from test modules or other modules which 
*   will not ship in binary format, we disable the downloadLicenses task and
*   disallow access to the runtime configuration.
*
*   Disabling the downloadLicenses task is not required by downstream consumers (license_finder), but consistent with intent.
*
*   Disallowed runtime config access is required to target https://github.com/hierynomus/license-gradle-plugin/blob/71bc244799725508f3a5f6b19058ec81a9ecc3ee/src/main/groovy/nl/javadude/gradle/plugins/license/LicenseResolver.groovy#L145
 */
configure(subprojects.findAll { excludedScanProjects.contains(it.name) }) {
    def runtimeConf = it.configurations.runtime
    runtimeConf.setCanBeResolved(false);
    it.getTasksByName("downloadLicenses", false)*.setEnabled(false);
}


task jacocoSubProjects() {
    subprojects.findAll { it.name in javaProjectsWithUnitTests }.each { dependsOn("${it.name}:jacocoTestReport") }
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.enabled true
        html.enabled true
    }
}

task publishAllVersions {
    group 'Zowe Publishing'
    description 'Publish SDK libraries for all version of Spring Boot to Zowe Artifactory'
    doLast {
        println 'Published all versions of SDK'
    }
}

publishAllVersions.dependsOn publishArtifacts

//-----------Release part start
apply plugin: 'net.researchgate.release'

ext.releaseScope = project.hasProperty('release.scope') ? project.getProperty('release.scope') : 'patch'

release {
    failOnCommitNeeded = false
    failOnPublishNeeded = false
    failOnSnapshotDependencies = false
    failOnUnversionedFiles = false
    failOnUpdateNeeded = false
    revertOnFail = true
    preCommitText = '[Gradle Release plugin]'
    preTagCommitMessage = '[skip ci] Before tag commit'
    tagCommitMessage = 'Release:'
    tagTemplate = '${version}'
    newVersionCommitMessage = 'Create new version:'
    versionPropertyFile = 'gradle.properties'
    buildTasks = ['build']

    if (releaseScope == 'minor') {
        versionPatterns = [
            /[.]*\.(\d+)\.(\d+)[.]*/: { Matcher m, Project p -> m.replaceAll(".${(m[0][1] as int) + 1}.0") }
        ]
    } else if (releaseScope == 'major') {
        versionPatterns = [
            /(\d+)\.(\d+)\.(\d+)[.]*/: { Matcher m, Project p -> m.replaceAll("${(m[0][1] as int) + 1}.0.0") }
        ]
    } else {
        versionPatterns = [
            /(\d+)([^\d]*$)/: { Matcher m, Project p -> m.replaceAll("${(m[0][1] as int) + 1}${m[0][2]}") }
        ]
    }

    scmAdapters = [
        net.researchgate.release.GitAdapter
    ]

    git {
        requireBranch = 'master'
        pushToRemote = 'origin'
        pushToBranchPrefix = ''
        commitVersionFileOnly = false
        signTag = false
    }
}

afterReleaseBuild.dependsOn publishAllVersions
//-----------Release part end


